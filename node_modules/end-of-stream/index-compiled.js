'use strict';

var once = require('once');

var noop = function noop() {};

var isRequest = function isRequest(stream) {
	return stream.setHeader && typeof stream.abort === 'function';
};

var eos = function eos(_x, _x2, _x3) {
	var _again = true;

	_function: while (_again) {
		var stream = _x,
		    opts = _x2,
		    callback = _x3;
		ws = rs = readable = writable = onlegacyfinish = onfinish = onend = onclose = onrequest = undefined;
		_again = false;

		if (typeof opts === 'function') {
			_x = stream;
			_x2 = null;
			_x3 = opts;
			_again = true;
			continue _function;
		}
		if (!opts) opts = {};

		callback = once(callback || noop);

		var ws = stream._writableState;
		var rs = stream._readableState;
		var readable = opts.readable || opts.readable !== false && stream.readable;
		var writable = opts.writable || opts.writable !== false && stream.writable;

		var onlegacyfinish = function onlegacyfinish() {
			if (!stream.writable) onfinish();
		};

		var onfinish = function onfinish() {
			writable = false;
			if (!readable) callback();
		};

		var onend = function onend() {
			readable = false;
			if (!writable) callback();
		};

		var onclose = function onclose() {
			if (readable && !(rs && rs.ended)) return callback(new Error('premature close'));
			if (writable && !(ws && ws.ended)) return callback(new Error('premature close'));
		};

		var onrequest = function onrequest() {
			stream.req.on('finish', onfinish);
		};

		if (isRequest(stream)) {
			stream.on('complete', onfinish);
			stream.on('abort', onclose);
			if (stream.req) onrequest();else stream.on('request', onrequest);
		} else if (writable && !ws) {
			// legacy streams
			stream.on('end', onlegacyfinish);
			stream.on('close', onlegacyfinish);
		}

		stream.on('end', onend);
		stream.on('finish', onfinish);
		if (opts.error !== false) stream.on('error', callback);
		stream.on('close', onclose);

		return function () {
			stream.removeListener('complete', onfinish);
			stream.removeListener('abort', onclose);
			stream.removeListener('request', onrequest);
			if (stream.req) stream.req.removeListener('finish', onfinish);
			stream.removeListener('end', onlegacyfinish);
			stream.removeListener('close', onlegacyfinish);
			stream.removeListener('finish', onfinish);
			stream.removeListener('end', onend);
			stream.removeListener('error', callback);
			stream.removeListener('close', onclose);
		};
	}
};

module.exports = eos;

//# sourceMappingURL=index-compiled.js.map