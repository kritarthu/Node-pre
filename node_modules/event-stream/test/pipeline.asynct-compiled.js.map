{"version":3,"sources":["pipeline.asynct.js"],"names":[],"mappings":";;AAAA,IAAI,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAA;;AAEtB,OAAO,CAAC,yBAAyB,CAAC,GAAG,UAAU,IAAI,EAAE;;AAEnD,MAAI,MAAM,GAAG,CAAC,CAAC;AACf,MAAI,IAAI,GAAG,EAAE,CAAC,QAAQ,CACpB,EAAE,CAAC,OAAO,CAAC,UAAS,IAAI,EAAE;AACxB,WAAO,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;GAChC,CAAC,EACF,EAAE,CAAC,OAAO,CAAC,UAAS,IAAI,EAAE;AACxB,WAAO,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;GAC5C,CAAC,CACH,CAAA;;AAED,MAAI,CAAC,EAAE,CAAC,OAAO,EAAE,UAAS,GAAG,EAAE;AAC7B,UAAM,EAAE,CAAA;AACR,WAAO,CAAC,GAAG,CAAC,aAAa,EAAE,MAAM,CAAC,CAAA;AAChC,WAAO,CAAC,QAAQ,CAAC,YAAY;AAC3B,aAAO,IAAI,CAAC,IAAI,EAAE,CAAC;KACpB,CAAC,CAAA;GACL,CAAC,CAAA;;AAEF,SAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;CAE1B,CAAA;;AAED,OAAO,CAAC,gCAAgC,CAAC,GAAG,UAAU,IAAI,EAAE;;AAE1D,MAAI,MAAM,GAAG,CAAC,CAAC;AACf,MAAI,IAAI,GAAG,EAAE,CAAC,QAAQ,CACpB,EAAE,CAAC,OAAO,CAAC,UAAS,IAAI,EAAE;AACxB,WAAO,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;GAChC,CAAC,EACF,EAAE,CAAC,OAAO,CAAC,UAAS,IAAI,EAAE;AACxB,WAAO,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;GAC5C,CAAC,EACF,EAAE,CAAC,OAAO,EAAE,CACb,CAAA;;AAED,MAAI,CAAC,EAAE,CAAC,OAAO,EAAE,UAAS,GAAG,EAAE;AAC7B,UAAM,EAAE,CAAA;AACR,WAAO,CAAC,GAAG,CAAC,aAAa,EAAE,MAAM,CAAC,CAAA;AAChC,WAAO,CAAC,QAAQ,CAAC,YAAY;AAC3B,aAAO,IAAI,CAAC,IAAI,EAAE,CAAC;KACpB,CAAC,CAAA;GACL,CAAC,CAAA;;AAEF,SAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;CAE1B,CAAA;;AAED,OAAO,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,CAAA","file":"pipeline.asynct-compiled.js","sourcesContent":["var es = require('..')\n\nexports['do not duplicate errors'] = function (test) {\n\n  var errors = 0;\n  var pipe = es.pipeline(\n    es.through(function(data) {\n      return this.emit('data', data);\n    }),\n    es.through(function(data) {\n      return this.emit('error', new Error(data));\n    })\n  )\n\n  pipe.on('error', function(err) {\n    errors++\n    console.log('error count', errors)\n      process.nextTick(function () {\n        return test.done();\n      })\n  })\n\n  return pipe.write('meh');\n\n}\n\nexports['3 pipe do not duplicate errors'] = function (test) {\n\n  var errors = 0;\n  var pipe = es.pipeline(\n    es.through(function(data) {\n      return this.emit('data', data);\n    }),\n    es.through(function(data) {\n      return this.emit('error', new Error(data));\n    }),\n    es.through()\n  )\n\n  pipe.on('error', function(err) {\n    errors++\n    console.log('error count', errors)\n      process.nextTick(function () {\n        return test.done();\n      })\n  })\n\n  return pipe.write('meh');\n\n}\n\nrequire('./helper')(module)\n"]}