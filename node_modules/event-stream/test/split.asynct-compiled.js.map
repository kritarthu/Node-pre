{"version":3,"sources":["split.asynct.js"],"names":[],"mappings":";;AAAA,IAAI,EAAE,GAAG,OAAO,CAAC,KAAK,CAAC;IACnB,EAAE,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC;IACrC,CAAC,GAAG,OAAO,CAAC,OAAO,CAAC;IACpB,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI;IAC3B,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC;IAClB,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,MAAM;IACjC,IAAI,GAAG,OAAO,CAAC,aAAa,CAAC,CAAA;;AAEjC,OAAO,CAAE,oCAAoC,CAAC,GAAG,UAAU,IAAI,EAAE;AAC/D,MAAI,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC;MACzB,QAAQ,GAAG,EAAE,CAAC,YAAY,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC;MACvD,EAAE,GAAG,EAAE,CAAC,KAAK,EAAE;MACf,MAAM,GAAG,EAAE;MACX,KAAK,GAAG,KAAK;MACb,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,EAAE,CAAA;;AAE1B,MAAI,CAAC,GAAG,IAAI,MAAM,EAAG,CAAA;;AAErB,GAAC,CAAC,KAAK,GAAG,UAAU,CAAC,EAAE;AACrB,UAAM,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAA;GACtB,CAAA;AACD,GAAC,CAAC,GAAG,GAAG,YAAY;;AAEhB,SAAK,GAAG,IAAI,CAAA;AACZ,YAAQ,CAAC,OAAO,CAAC,UAAU,CAAC,EAAC,CAAC,EAAE;;;;;;AAM9B,UAAG,CAAC,EACF,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;KACxB,CAAC,CAAA;;AAEF,WAAO,CAAC,QAAQ,CAAC,YAAY;AAC3B,UAAI,CAAC,IAAI,EAAE,CAAA;AACX,OAAC,CAAC,QAAQ,EAAE,CAAA;KACb,CAAC,CAAA;GACL,CAAA;AACD,GAAC,CAAC,QAAQ,GAAG,IAAI,CAAA;;AAEjB,IAAE,CAAC,gBAAgB,CAAC,MAAM,EAAE,EAAC,KAAK,EAAE,GAAG,EAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;AAClD,IAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;CAEX,CAAA;;AAED,OAAO,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,CAAA","file":"split.asynct-compiled.js","sourcesContent":["var es = require('../')\n  , it = require('it-is').style('colour')\n  , d = require('ubelt')\n  , join = require('path').join\n  , fs = require('fs')\n  , Stream = require('stream').Stream\n  , spec = require('stream-spec')\n\nexports ['es.split() works like String#split'] = function (test) {\n  var readme = join(__filename)\n    , expected = fs.readFileSync(readme, 'utf-8').split('\\n')\n    , cs = es.split()\n    , actual = []\n    , ended = false\n    , x = spec(cs).through()\n\n  var a = new Stream ()\n  \n  a.write = function (l) {\n    actual.push(l.trim())\n  }\n  a.end = function () {\n\n      ended = true\n      expected.forEach(function (v,k) {\n        //String.split will append an empty string ''\n        //if the string ends in a split pattern.\n        //es.split doesn't which was breaking this test.\n        //clearly, appending the empty string is correct.\n        //tests are passing though. which is the current job.\n        if(v)\n          it(actual[k]).like(v)\n      })\n      //give the stream time to close\n      process.nextTick(function () {\n        test.done()\n        x.validate()\n      })\n  }\n  a.writable = true\n  \n  fs.createReadStream(readme, {flags: 'r'}).pipe(cs)\n  cs.pipe(a) \n  \n}\n\nrequire('./helper')(module)\n"]}