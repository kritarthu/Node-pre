{"version":3,"sources":["index.js"],"names":[],"mappings":";;AAAA,IAAI,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,CAAA;AACxB,IAAI,IAAI,GAAG,OAAO,CAAC,aAAa,CAAC,CAAA;AACjC,IAAI,CAAC,GAAG,OAAO,CAAC,YAAY,CAAC,CAAA;;AAE7B,SAAS,IAAI,CAAC,MAAM,EAAE,QAAQ,EAAE;AAC9B,MAAI,MAAM,GAAG,EAAE,CAAA;AACf,QAAM,CAAC,EAAE,CAAC,MAAM,EAAE,UAAU,IAAI,EAAE;AAChC,UAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;GAClB,CAAC,CAAA;AACF,QAAM,CAAC,IAAI,CAAC,KAAK,EAAE,YAAY;AAC7B,YAAQ,CAAC,IAAI,EAAE,MAAM,CAAC,CAAA;GACvB,CAAC,CAAA;AACF,QAAM,CAAC,IAAI,CAAC,OAAO,EAAE,UAAU,GAAG,EAAE;AAClC,YAAQ,CAAC,GAAG,CAAC,CAAA;GACd,CAAC,CAAA;CACH;;AAED,SAAS,KAAK,CAAC,MAAM,EAAE;AACrB,QAAM,CAAC,EAAE,CAAC,MAAM,EAAE,YAAY;AAC5B,QAAG,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,EAAE,OAAM;AAC9B,UAAM,CAAC,KAAK,EAAE,CAAA;AACd,WAAO,CAAC,QAAQ,CAAC,YAAY;AAC3B,YAAM,CAAC,MAAM,EAAE,CAAA;KAChB,CAAC,CAAA;GACH,CAAC,CAAA;CACH;;AAED,OAAO,CAAC,KAAK,CAAC,GAAG,UAAU,IAAI,EAAE;;AAE/B,MAAI,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC,EAAE;AACzB,QAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAA;AACpB,QAAG,CAAC,IAAI,EAAE,EACR,OAAO,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;AACzB,WAAO,IAAI,CAAA;GACZ,CAAC,CAAA;;AAEF,MAAI,CAAC,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC,cAAc,EAAE,CAAA;;AAEpC,MAAI,CAAC,EAAE,EAAE,UAAU,GAAG,EAAE,GAAG,EAAE;AAC3B,QAAI,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,CAAA;AAC3B,QAAI,CAAC,IAAI,EAAE,CAAA;GACZ,CAAC,CAAA;CACH,CAAA;;AAED,OAAO,CAAC,QAAQ,CAAC,GAAG,UAAU,IAAI,EAAE;;AAElC,MAAI,CAAC,GAAG,IAAI;MACR,QAAQ,GAAG,EAAE,CAAA;;AAEjB,SAAM,CAAC,EAAE,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,CAAA;;AAE3C,MAAI,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAA;;AAE9B,MAAI,CAAC,CAAC,CAAC,CACJ,QAAQ,EAAE,CACV,QAAQ,CAAC,EAAC,MAAM,EAAE,IAAI,EAAC,CAAC,CACxB,cAAc,EAAE,CAAA;;AAEnB,MAAI,CAAC,CAAC,EAAE,UAAU,GAAG,EAAE,MAAM,EAAE;AAC7B,QAAG,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;AACvB,KAAC,CAAC,SAAS,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAA;AAC7B,QAAI,CAAC,IAAI,EAAE,CAAA;GACZ,CAAC,CAAA;CAEH,CAAA;;AAED,OAAO,CAAC,iBAAiB,CAAC,GAAG,UAAU,IAAI,EAAE;;AAE3C,MAAI,CAAC,GAAG,IAAI;MACR,QAAQ,GAAG,EAAE,CAAA;;AAEjB,SAAM,CAAC,EAAE,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,CAAA;;AAE3C,MAAI,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAA;;AAE9B,MAAI,CAAC,CAAC,CAAC,CACJ,QAAQ,EAAE,CACV,QAAQ,CAAC,EAAC,MAAM,EAAE,IAAI,EAAC,CAAC,CACxB,cAAc,EAAE,CAAA;;AAEnB,OAAK,CAAC,CAAC,CAAC,CAAA;;AAER,MAAI,CAAC,CAAC,EAAE,UAAU,GAAG,EAAE,MAAM,EAAE;AAC7B,QAAG,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;AACvB,KAAC,CAAC,SAAS,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAA;AAC7B,QAAI,CAAC,IAAI,EAAE,CAAA;GACZ,CAAC,CAAA;CAEH,CAAA;;AAED,OAAO,CAAC,2CAA2C,CAAC,GAAG,UAAU,IAAI,EAAE;;AAErE,MAAI,CAAC,GAAG,EAAE;MACN,QAAQ,GAAG,EAAE,CAAA;AACjB,SAAM,CAAC,EAAE,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,CAAA;;AAG3C,MAAI,SAAS,GAAG,QAAQ,CAAC,KAAK,EAAE,CAAA;AAChC,MAAI,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,EAAE;AAC3B,QAAI,IAAI,GAAG,IAAI,CAAA;AACf,cAAU,CAAC,YAAY;AACrB,UAAG,SAAS,CAAC,MAAM,EACjB,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC,KAAK,EAAE,CAAC,CAAA,KAEpC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;AAClB,OAAC,EAAE,CAAA;KACJ,EAAE,CAAC,CAAC,CAAA;GACN,CAAC,CAAA;;;;;;;;AAQF,MAAI,CAAC,CAAC,CAAC,CACJ,QAAQ,EAAE,CACV,QAAQ,CAAC,EAAC,MAAM,EAAE,KAAK,EAAE,CAAC,CAC1B,cAAc,EAAE,CAAA;;;AAGnB,MAAI,MAAM,GAAG,KAAK,CAAA;AAClB,MAAI,CAAC,GAAG,WAAW,CAAC,YAAY;AAC9B,QAAG,CAAC,MAAM,EAAE,CAAC,CAAC,KAAK,EAAE,CAAA,KAChB,CAAC,CAAC,MAAM,EAAE,CAAA;AACf,UAAM,GAAG,CAAC,MAAM,CAAA;GACjB,EAAE,CAAC,CAAC,CAAA;;AAEL,GAAC,CAAC,EAAE,CAAC,KAAK,EAAE,YAAY;AACtB,iBAAa,CAAC,CAAC,CAAC,CAAA;GACjB,CAAC,CAAA;;AAEF,MAAI,CAAC,CAAC,EAAE,UAAU,GAAG,EAAE,MAAM,EAAE;AAC7B,QAAG,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;AACvB,KAAC,CAAC,SAAS,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAA;AAC7B,QAAI,CAAC,IAAI,EAAE,CAAA;GACZ,CAAC,CAAA;CAEH,CAAA","file":"index-compiled.js","sourcesContent":["var from = require('..')\nvar spec = require('stream-spec')\nvar a = require('assertions')\n\nfunction read(stream, callback) {\n  var actual = []\n  stream.on('data', function (data) {\n    actual.push(data)\n  })\n  stream.once('end', function () {\n    callback(null, actual)\n  })\n  stream.once('error', function (err) {\n    callback(err)\n  })\n}\n\nfunction pause(stream) {\n  stream.on('data', function () {\n    if(Math.random() > 0.1) return\n    stream.pause()\n    process.nextTick(function () {\n      stream.resume()\n    })\n  })\n}\n\nexports['inc'] = function (test) {\n\n  var fs = from(function (i) {\n    this.emit('data', i)\n    if(i >= 99)\n      return this.emit('end')\n    return true\n  })\n\n  spec(fs).readable().validateOnExit() \n\n  read(fs, function (err, arr) {\n    test.equal(arr.length, 100)\n    test.done()\n  })\n}\n\nexports['simple'] = function (test) {\n\n  var l = 1000\n    , expected = [] \n\n  while(l--) expected.push(l * Math.random())\n\n  var t = from(expected.slice())\n\n  spec(t)\n    .readable()\n    .pausable({strict: true})\n    .validateOnExit()\n\n  read(t, function (err, actual) {\n    if(err) test.error(err) //fail\n    a.deepEqual(actual, expected)\n    test.done()\n  })\n\n}\n\nexports['simple pausable'] = function (test) {\n\n  var l = 1000\n    , expected = [] \n\n  while(l--) expected.push(l * Math.random())\n\n  var t = from(expected.slice())\n\n  spec(t)\n    .readable()\n    .pausable({strict: true})\n    .validateOnExit()\n\n  pause(t)\n\n  read(t, function (err, actual) {\n    if(err) test.error(err) //fail\n    a.deepEqual(actual, expected)\n    test.done()\n  })\n\n}\n\nexports['simple (not strictly pausable) setTimeout'] = function (test) {\n\n  var l = 10\n    , expected = [] \n  while(l--) expected.push(l * Math.random())\n\n\n  var _expected = expected.slice()\n  var t = from(function (i, n) {\n    var self = this\n    setTimeout(function () {\n      if(_expected.length)\n        self.emit('data', _expected.shift())\n      else\n        self.emit('end') \n      n()\n    }, 3)\n  })\n\n  /*\n    using from in this way will not be strictly pausable.\n    it could be extended to buffer outputs, but I think a better\n    way would be to use a PauseStream that implements strict pause.\n  */\n\n  spec(t)\n    .readable()\n    .pausable({strict: false })\n    .validateOnExit()\n\n  //pause(t)\n  var paused = false\n  var i = setInterval(function () {\n    if(!paused) t.pause()\n    else t.resume()\n    paused = !paused\n  }, 2)\n\n  t.on('end', function () {\n    clearInterval(i)\n  })\n\n  read(t, function (err, actual) {\n    if(err) test.error(err) //fail\n    a.deepEqual(actual, expected)\n    test.done()\n  })\n\n}\n\n\n"]}