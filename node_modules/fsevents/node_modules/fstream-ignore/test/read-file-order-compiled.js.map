{"version":3,"sources":["read-file-order.js"],"names":[],"mappings":"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","file":"read-file-order-compiled.js","sourcesContent":["var IgnoreFile = require(\"../\")\n, fs = require('fs')\n\n// set the ignores just for this test\nvar c = require(\"./common.js\")\nc.ignores({ \".gitignore\": [\"a/b/c/abc\"] })\nc.ignores({ \".ignore\": [\"*\", \"!a/b/c/abc\"] })\n\n// the only files we expect to see\nvar expected =\n  [ \"/a\"\n  , \"/a/b\"\n  , \"/a/b/c\"\n  , \"/a/b/c/abc\" ]\n\nvar originalReadFile = fs.readFile\n, parallelCount = 0\n, firstCall\n\n// Overwrite fs.readFile so that when .gitignore and .ignore are read in\n// parallel, .ignore will always be read first.\nfs.readFile = function (filename, options, callback) {\n  if (typeof options === 'function') {\n    callback = options\n    options = false\n  }\n\n  parallelCount++\n\n  process.nextTick(function () {\n    if (parallelCount > 1) {\n      if (!firstCall) {\n        return firstCall = function (cb) {\n          originalReadFile(filename, options, function (err, data) {\n            callback(err, data)\n            if (cb) cb()\n          })\n        }\n      }\n\n      if (filename.indexOf('.gitignore') !== -1) {\n        firstCall(function () {\n          originalReadFile(filename, options, callback)\n        })\n      } else {\n        originalReadFile(filename, options, function (err, data) {\n          callback(err, data)\n          firstCall()\n        })\n      }\n    } else {\n      originalReadFile(filename, options, callback)\n      parallelCount = 0\n    }\n  })\n}\n\nrequire(\"tap\").test(\"read file order\", function (t) {\n  t.pass(\"start\")\n\n  IgnoreFile({ path: __dirname + \"/fixtures\"\n             , ignoreFiles: [\".gitignore\", \".ignore\"] })\n    .on(\"ignoreFile\", function (e) {\n      console.error(\"ignore file!\", e)\n    })\n    .on(\"child\", function (e) {\n      var p = e.path.substr(e.root.path.length)\n      var i = expected.indexOf(p)\n      if (i === -1) {\n        t.fail(\"unexpected file found\", {f: p})\n      } else {\n        t.pass(p)\n        expected.splice(i, 1)\n      }\n    })\n    .on(\"close\", function () {\n      fs.readFile = originalReadFile\n      t.notOk(expected.length, \"all expected files should be seen\")\n      t.end()\n    })\n})\n"]}