{"version":3,"sources":["imurmurhash.js"],"names":[],"mappings":"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","file":"imurmurhash-compiled.js","sourcesContent":["/**\n * @preserve\n * JS Implementation of incremental MurmurHash3 (r150) (as of May 10, 2013)\n *\n * @author <a href=\"mailto:jensyt@gmail.com\">Jens Taylor</a>\n * @see http://github.com/homebrewing/brauhaus-diff\n * @author <a href=\"mailto:gary.court@gmail.com\">Gary Court</a>\n * @see http://github.com/garycourt/murmurhash-js\n * @author <a href=\"mailto:aappleby@gmail.com\">Austin Appleby</a>\n * @see http://sites.google.com/site/murmurhash/\n */\n(function(){\n    var cache;\n\n    // Call this function without `new` to use the cached object (good for\n    // single-threaded environments), or with `new` to create a new object.\n    //\n    // @param {string} key A UTF-16 or ASCII string\n    // @param {number} seed An optional positive integer\n    // @return {object} A MurmurHash3 object for incremental hashing\n    function MurmurHash3(key, seed) {\n        var m = this instanceof MurmurHash3 ? this : cache;\n        m.reset(seed)\n        if (typeof key === 'string' && key.length > 0) {\n            m.hash(key);\n        }\n\n        if (m !== this) {\n            return m;\n        }\n    };\n\n    // Incrementally add a string to this hash\n    //\n    // @param {string} key A UTF-16 or ASCII string\n    // @return {object} this\n    MurmurHash3.prototype.hash = function(key) {\n        var h1, k1, i, top, len;\n\n        len = key.length;\n        this.len += len;\n\n        k1 = this.k1;\n        i = 0;\n        switch (this.rem) {\n            case 0: k1 ^= len > i ? (key.charCodeAt(i++) & 0xffff) : 0;\n            case 1: k1 ^= len > i ? (key.charCodeAt(i++) & 0xffff) << 8 : 0;\n            case 2: k1 ^= len > i ? (key.charCodeAt(i++) & 0xffff) << 16 : 0;\n            case 3:\n                k1 ^= len > i ? (key.charCodeAt(i) & 0xff) << 24 : 0;\n                k1 ^= len > i ? (key.charCodeAt(i++) & 0xff00) >> 8 : 0;\n        }\n\n        this.rem = (len + this.rem) & 3; // & 3 is same as % 4\n        len -= this.rem;\n        if (len > 0) {\n            h1 = this.h1;\n            while (1) {\n                k1 = (k1 * 0x2d51 + (k1 & 0xffff) * 0xcc9e0000) & 0xffffffff;\n                k1 = (k1 << 15) | (k1 >>> 17);\n                k1 = (k1 * 0x3593 + (k1 & 0xffff) * 0x1b870000) & 0xffffffff;\n\n                h1 ^= k1;\n                h1 = (h1 << 13) | (h1 >>> 19);\n                h1 = (h1 * 5 + 0xe6546b64) & 0xffffffff;\n\n                if (i >= len) {\n                    break;\n                }\n\n                k1 = ((key.charCodeAt(i++) & 0xffff)) ^\n                     ((key.charCodeAt(i++) & 0xffff) << 8) ^\n                     ((key.charCodeAt(i++) & 0xffff) << 16);\n                top = key.charCodeAt(i++);\n                k1 ^= ((top & 0xff) << 24) ^\n                      ((top & 0xff00) >> 8);\n            }\n\n            k1 = 0;\n            switch (this.rem) {\n                case 3: k1 ^= (key.charCodeAt(i + 2) & 0xffff) << 16;\n                case 2: k1 ^= (key.charCodeAt(i + 1) & 0xffff) << 8;\n                case 1: k1 ^= (key.charCodeAt(i) & 0xffff);\n            }\n\n            this.h1 = h1;\n        }\n\n        this.k1 = k1;\n        return this;\n    };\n\n    // Get the result of this hash\n    //\n    // @return {number} The 32-bit hash\n    MurmurHash3.prototype.result = function() {\n        var k1, h1;\n        \n        k1 = this.k1;\n        h1 = this.h1;\n\n        if (k1 > 0) {\n            k1 = (k1 * 0x2d51 + (k1 & 0xffff) * 0xcc9e0000) & 0xffffffff;\n            k1 = (k1 << 15) | (k1 >>> 17);\n            k1 = (k1 * 0x3593 + (k1 & 0xffff) * 0x1b870000) & 0xffffffff;\n            h1 ^= k1;\n        }\n\n        h1 ^= this.len;\n\n        h1 ^= h1 >>> 16;\n        h1 = (h1 * 0xca6b + (h1 & 0xffff) * 0x85eb0000) & 0xffffffff;\n        h1 ^= h1 >>> 13;\n        h1 = (h1 * 0xae35 + (h1 & 0xffff) * 0xc2b20000) & 0xffffffff;\n        h1 ^= h1 >>> 16;\n\n        return h1 >>> 0;\n    };\n\n    // Reset the hash object for reuse\n    //\n    // @param {number} seed An optional positive integer\n    MurmurHash3.prototype.reset = function(seed) {\n        this.h1 = typeof seed === 'number' ? seed : 0;\n        this.rem = this.k1 = this.len = 0;\n        return this;\n    };\n\n    // A cached object to use. This can be safely used if you're in a single-\n    // threaded environment, otherwise you need to create new hashes to use.\n    cache = new MurmurHash3();\n\n    if (typeof(module) != 'undefined') {\n        module.exports = MurmurHash3;\n    } else {\n        this.MurmurHash3 = MurmurHash3;\n    }\n}());\n"]}