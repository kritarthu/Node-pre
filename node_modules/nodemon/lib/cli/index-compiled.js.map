{"version":3,"sources":["index.js"],"names":[],"mappings":";;AAAA,IAAI,MAAK,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;;;;;;;;;;;AAW/B,SAAS,YAAY,CAAC,MAAM,EAAE;AAC5B,MAAI,IAAI,GAAG,EAAE,CAAC;;AAEd,MAAI,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AAC9B,MAAI,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;AAC1B,MAAI,CAAC,GAAG,CAAC,CAAC;AACV,MAAI,IAAI,GAAG,KAAK,CAAC;AACjB,MAAI,OAAO,GAAG,EAAE,CAAC;AACjB,MAAI,IAAI,GAAG,EAAE,CAAC;;AAEd,SAAO,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;AACtB,QAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAChC,QAAI,IAAI,KAAK,GAAG,IAAI,IAAI,KAAK,IAAI,EAAE;AACjC,UAAI,GAAG,IAAI,CAAC;AACZ,aAAO,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;KACjC,MAAM,IAAI,IAAI,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;AAC9C,UAAI,GAAG,KAAK,CAAC;AACb,aAAO,IAAI,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACvC,UAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;KACpB,MAAM,IAAI,IAAI,EAAE;AACf,aAAO,IAAI,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;KAC3B,MAAM;AACL,UAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;KACrB;GACF;;AAED,SAAO,IAAI,CAAC;CACb;;AAED,MAAM,CAAC,OAAO,GAAG;AACf,OAAK,EAAE,eAAU,IAAI,EAAE;AACrB,QAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;AAC5B,UAAI,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC;KAC3B;;AAED,WAAO,MAAK,CAAC,IAAI,CAAC,CAAC;GACpB;CACF,CAAC","file":"index-compiled.js","sourcesContent":["var parse = require('./parse');\n\n/**\n * Converts a string to command line args, in particular\n * groups together quoted values.\n * This is a utility function to allow calling nodemon as a required\n * library, but with the CLI args passed in (instead of an object).\n *\n * @param  {String} string\n * @return {Array}\n */\nfunction stringToArgs(string) {\n  var args = [];\n\n  var parts = string.split(' ');\n  var length = parts.length;\n  var i = 0;\n  var open = false;\n  var grouped = '';\n  var lead = '';\n\n  for (; i < length; i++) {\n    lead = parts[i].substring(0, 1);\n    if (lead === '\"' || lead === '\\'') {\n      open = lead;\n      grouped = parts[i].substring(1);\n    } else if (open && parts[i].slice(-1) === open) {\n      open = false;\n      grouped += ' ' + parts[i].slice(0, -1);\n      args.push(grouped);\n    } else if (open) {\n      grouped += ' ' + parts[i];\n    } else {\n      args.push(parts[i]);\n    }\n  }\n\n  return args;\n}\n\nmodule.exports = {\n  parse: function (argv) {\n    if (typeof argv === 'string') {\n      argv = stringToArgs(argv);\n    }\n\n    return parse(argv);\n  },\n};"]}