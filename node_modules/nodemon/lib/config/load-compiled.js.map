{"version":3,"sources":["load.js"],"names":[],"mappings":"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","file":"load-compiled.js","sourcesContent":["var debug = require('debug')('nodemon');\nvar fs = require('fs');\nvar path = require('path');\nvar exists = fs.exists || path.exists;\nvar utils = require('../utils');\nvar rules = require('../rules');\nvar parse = require('../rules/parse');\nvar exec = require('./exec');\nvar defaults = require('./defaults');\n\nmodule.exports = load;\n\n/**\n * Load the nodemon config, first reading the global root/nodemon.json, then\n * the local nodemon.json to the exec and then overwritting using any user\n * specified settings (i.e. from the cli)\n *\n * @param  {Object} settings user defined settings\n * @param  {Function} ready    callback that recieves complete config\n */\nfunction load(settings, options, config, callback) {\n  config.loaded = [];\n  // first load the root nodemon.json\n  loadFile(options, config, utils.home, function (options) {\n    // then load the user's local nodemon.json\n    loadFile(options, config, process.cwd(), function (options) {\n      // Then merge over with the user settings (parsed from the cli).\n      // Note that merge protects and favours existing values over new values,\n      // and thus command line arguments get priority\n      options = utils.merge(settings, options);\n\n      // legacy support\n      if (!Array.isArray(options.ignore)) {\n        options.ignore = [options.ignore];\n      }\n\n      if (!options.ignoreRoot) {\n        options.ignoreRoot = defaults.ignoreRoot;\n      }\n\n      // blend the user ignore and the default ignore together\n      if (options.ignoreRoot && options.ignore) {\n        if (!Array.isArray(options.ignoreRoot)) {\n          options.ignoreRoot = [options.ignoreRoot];\n        }\n        options.ignore = options.ignoreRoot.concat(options.ignore);\n      } else {\n        options.ignore = defaults.ignore.concat(options.ignore);\n      }\n\n\n      // add in any missing defaults\n      options = utils.merge(options, defaults);\n\n      // work out the execOptions based on the final config we have\n      options.execOptions = exec({\n        script: options.script,\n        exec: options.exec,\n        args: options.args,\n        scriptPosition: options.scriptPosition,\n        nodeArgs: options.nodeArgs,\n        ext: options.ext,\n        env: options.env,\n      }, options.execMap);\n\n      // clean up values that we don't need at the top level\n      delete options.scriptPosition;\n      delete options.script;\n      delete options.args;\n      delete options.ext;\n\n      if (options.quiet) {\n        utils.quiet();\n      }\n\n      if (options.verbose) {\n        utils.debug = true;\n      }\n\n      // simplify the ready callback to be called after the rules are normalised\n      // from strings to regexp through the rules lib. Note that this gets\n      // created *after* options is overwritten twice in the lines above.\n      var ready = function (options) {\n        normaliseRules(options, callback);\n      };\n\n      // if we didn't pick up a nodemon.json file & there's no cli ignores\n      // then try loading an old style .nodemonignore file\n      if (config.loaded.length === 0) {\n        // TODO decide whether this is just confusing...\n        var legacy = loadLegacyIgnore.bind(null, options, ready);\n\n        // first try .nodemonignore, if that doesn't exist, try nodemon-ignore\n        return legacy('.nodemonignore', function () {\n          legacy('nodemon-ignore', function (options) {\n            ready(options);\n          });\n        });\n      }\n\n      ready(options);\n    });\n  });\n}\n\n/**\n * Loads the old style nodemonignore files which are simply a list of patterns\n * in a file to ignore\n *\n * @param  {Object} options    nodemon user options\n * @param  {Function} success\n * @param  {String} filename   ignore file (.nodemonignore or nodemon-ignore)\n * @param  {Function} fail     (optional) failure callback\n */\nfunction loadLegacyIgnore(options, success, filename, fail) {\n  var ignoreFile = path.join(process.cwd(), filename);\n\n  exists(ignoreFile, function (exists) {\n    if (exists) {\n      return parse(ignoreFile, function (error, rules) {\n        options.ignore = rules.raw;\n        success(options);\n      });\n    }\n\n    if (fail) {\n      fail(options);\n    } else {\n      success(options);\n    }\n  });\n}\n\nfunction normaliseRules(options, ready) {\n  // convert ignore and watch options to rules/regexp\n  rules.watch.add(options.watch);\n  rules.ignore.add(options.ignore);\n\n  // normalise the watch and ignore arrays\n  options.watch = options.watch === false ? false : rules.rules.watch;\n  options.ignore = rules.rules.ignore;\n\n  ready(options);\n}\n\n/**\n * Looks for a config in the current working directory, and a config in the\n * user's home directory, merging the two together, giving priority to local\n * config. This can then be overwritten later by command line arguments\n *\n * @param  {Function} ready callback to pass loaded settings to\n */\nfunction loadFile(options, config, dir, ready) {\n  if (!ready) {\n    ready = function () {};\n  }\n\n  var callback = function (settings) {\n    // prefer the local nodemon.json and fill in missing items using\n    // the global options\n    ready(utils.merge(settings, options));\n  };\n\n  if (!dir) {\n    return callback({});\n  }\n\n  var filename = path.join(dir, 'nodemon.json');\n  fs.readFile(filename, 'utf8', function (err, data) {\n    if (err) {\n      return callback({});\n    }\n\n    var settings = {};\n\n    try {\n      settings = JSON.parse(data);\n      config.loaded.push(filename);\n    } catch (e) {\n      console.error(e);\n      utils.log.fail('Failed to parse config ' + filename);\n    }\n\n    // options values will overwrite settings\n    callback(settings);\n  });\n\n\n}"]}