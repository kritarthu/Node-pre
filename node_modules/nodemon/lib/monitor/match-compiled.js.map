{"version":3,"sources":["match.js"],"names":[],"mappings":"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","file":"match-compiled.js","sourcesContent":["var minimatch = require('minimatch');\nvar path = require('path');\nvar fs = require('fs');\nvar utils = require('../utils');\n\nmodule.exports = match;\nmodule.exports.rulesToMonitor = rulesToMonitor;\n\nfunction rulesToMonitor(watch, ignore, config) {\n  var monitor = [];\n\n  if (!Array.isArray(ignore)) {\n    if (ignore) {\n      ignore = [ignore];\n    } else {\n      ignore = [];\n    }\n  }\n\n  if (!Array.isArray(watch)) {\n    if (watch) {\n      watch = [watch];\n    } else {\n      watch = [];\n    }\n  }\n\n  if (watch && watch.length) {\n    monitor = utils.clone(watch);\n  }\n\n  if (ignore) {\n    [].push.apply(monitor, (ignore || []).map(function (rule) {\n      return '!' + rule;\n    }));\n  }\n\n  var cwd = process.cwd();\n\n  // next check if the monitored paths are actual directories\n  // or just patterns - and expand the rule to include *.*\n  monitor = monitor.map(function (rule) {\n    var not = rule.slice(0, 1) === '!';\n\n    if (not) {\n      rule = rule.slice(1);\n    }\n\n    if (rule === '.' || rule === '.*') {\n      rule = '*.*';\n    }\n\n    var dir = path.resolve(cwd, rule);\n\n    try {\n      var stat = fs.statSync(dir);\n      if (stat.isDirectory()) {\n        rule = dir;\n        if (rule.slice(-1) !== '/') {\n          rule += '/';\n        }\n        rule += '**/*';\n\n        // `!not` ... sorry.\n        if (!not) {\n          config.dirs.push(dir);\n        }\n      } else {\n        // ensures we end up in the check that tries to get a base directory\n        // and then adds it to the watch list\n        throw new Error();\n      }\n    } catch (e) {\n      var base = tryBaseDir(dir);\n      if (!not && base) {\n        if (config.dirs.indexOf(base) === -1) {\n          config.dirs.push(base);\n        }\n      }\n    }\n\n    if (rule.slice(-1) === '/') {\n      // just slap on a * anyway\n      rule += '*';\n    }\n\n    // if the url ends with * but not **/* and not *.*\n    // then convert to **/* - somehow it was missed :-\\\n    if (rule.slice(-4) !== '**/*' &&\n        rule.slice(-1) === '*' &&\n        rule.indexOf('*.') === -1) {\n      rule += '*/*';\n    }\n\n\n    return (not ? '!' : '') + rule;\n  });\n\n  return monitor;\n}\n\nfunction tryBaseDir(dir) {\n  var stat;\n  if (/[?*\\{\\[]+/.test(dir)) { // if this is pattern, then try to find the base\n    try {\n      var base = path.dirname(dir.replace(/([?*\\{\\[]+.*$)/, 'foo'));\n      stat = fs.statSync(base);\n      if (stat.isDirectory()) {\n        return base;\n      }\n    } catch (error) {\n      // console.log(error);\n    }\n  } else {\n    try {\n      stat = fs.statSync(dir);\n      // if this path is actually a single file that exists, then just monitor\n      // that, *specifically*.\n      if (stat.isFile() || stat.isDirectory()) {\n        return dir;\n      }\n    } catch (e) {}\n  }\n\n  return false;\n}\n\nfunction match(files, monitor, ext) {\n  // sort the rules by highest specificity (based on number of slashes)\n  // ignore rules (!) get sorted highest as they take precedent\n  // TODO actually check separator rules work on windows\n  var rules = monitor.sort(function (a, b) {\n    var r = b.split(path.sep).length - a.split(path.sep).length;\n    var aIsIgnore = a.slice(0, 1) === '!';\n    var bIsIgnore = b.slice(0, 1) === '!';\n\n    if (aIsIgnore || bIsIgnore) {\n      if (aIsIgnore) {\n        return -1;\n      } else {\n        return 1;\n      }\n    }\n\n    if (r === 0) {\n      return b.length - a.length;\n    }\n    return r;\n  }).map(function (s) {\n    var prefix = s.slice(0, 1);\n\n    if (prefix === '!') {\n      return '!**' + (prefix !== path.sep ? path.sep : '') + s.slice(1);\n    } else if (s.slice(0, 2) === '..') {\n      return path.resolve(process.cwd(), s);\n    }\n    return '**' + (prefix !== path.sep ? path.sep : '') + s;\n  });\n\n  var good = [];\n  var whitelist = []; // files that we won't check against the extension\n  var ignored = 0;\n  var watched = 0;\n  var usedRules = [];\n  var minimatchOpts = {};\n\n  // enable case-insensitivity on Windows\n  if (utils.isWindows) {\n    minimatchOpts.nocase = true;\n  }\n\n  files.forEach(function (file) {\n    var matched = false;\n    for (var i = 0; i < rules.length; i++) {\n      if (rules[i].slice(0, 1) === '!') {\n        if (!minimatch(file, rules[i], minimatchOpts)) {\n          ignored++;\n          matched = true;\n          break;\n        }\n      } else {\n        if (minimatch(file, rules[i], minimatchOpts)) {\n          watched++;\n\n          // don't repeat the output if a rule is matched\n          if (usedRules.indexOf(rules[i]) === -1) {\n            usedRules.push(rules[i]);\n            utils.log.detail('matched rule: ' + rules[i]);\n          }\n\n          // if the rule doesn't match the WATCH EVERYTHING\n          // but *does* match a rule that ends with *.*, then\n          // white list it - in that we don't run it through\n          // the extension check too.\n          if (rules[i] !== '**' + path.sep + '*.*' &&\n            rules[i].slice(-3) === '*.*') {\n            whitelist.push(file);\n          } else if (path.basename(file) === path.basename(rules[i])) {\n            // if the file matches the actual rule, then it's put on whitelist\n            whitelist.push(file);\n          } else {\n            good.push(file);\n          }\n          matched = true;\n          break;\n        }\n      }\n    }\n    if (!matched) {\n      ignored++;\n    }\n  });\n\n\n  // finally check the good files against the extensions that we're monitoring\n  if (ext) {\n    if (ext.indexOf(',') === -1) {\n      ext = '**/*.' + ext;\n    } else {\n      ext = '**/*.{' + ext + '}';\n    }\n\n    good = good.filter(function (file) {\n      // only compare the filename to the extension test\n      return minimatch(path.basename(file), ext, minimatchOpts);\n    });\n  } // else assume *.*\n\n  var result = good.concat(whitelist);\n\n  if (utils.isWindows) {\n    // fix for windows testing - I *think* this is okay to do\n    result = result.map(function (file) {\n      return file.slice(0, 1).toLowerCase() + file.slice(1);\n    });\n  }\n\n  return {\n    result: result,\n    ignored: ignored,\n    watched: watched,\n    total: files.length,\n  };\n}\n"]}