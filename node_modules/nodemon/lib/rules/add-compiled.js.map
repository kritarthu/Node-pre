{"version":3,"sources":["add.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,IAAI,KAAK,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;;;AAGhC,IAAI,aAAa,GAAG,MAAM,CAAC;;AAE3B,IAAI,kBAAkB,GAAG,OAAO,CAAC;AACjC,IAAI,UAAU,GAAG,MAAM,CAAC;AACxB,IAAI,aAAa,GAAG,gBAAgB,CAAC;AACrC,IAAI,UAAU,GAAG,KAAK,CAAC;;AAEvB,MAAM,CAAC,OAAO,GAAG,GAAG,CAAC;;;;;;;;;;;;;;;;;;;;AAoBrB,SAAS,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE;AAC/B,MAAI,CAAC,CAAA,EAAE,MAAM,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,GAAC,CAAC,KAAK,CAAC,EAAE;AAClC,UAAM,IAAI,KAAK,CAAC,yDAAyD,GACvE,gBAAgB,CAAC,CAAC;GACrB;;AAED,MAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;AACvB,QAAI,CAAC,OAAO,CAAC,UAAU,IAAI,EAAE;AAC3B,SAAG,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;KACzB,CAAC,CAAC;AACH,WAAO;GACR;;;;AAID,MAAI,IAAI,YAAY,MAAM,EAAE;;AAE1B,SAAK,CAAC,GAAG,CAAC,KAAK,CAAC,mDAAmD,CAAC,CAAC;AACrE,WAAO;GACR;;;;;;AAMD,MAAI,GAAG,CAAC,IAAI,IAAI,EAAE,CAAA,CAAE,OAAO,CAAC,aAAa,EAAE,IAAI,CAAC,CACpC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CACvB,OAAO,CAAC,kBAAkB,EAAE,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;;AAEpD,MAAI,MAAM,GAAG,KAAK,CAAC;;AAEnB,MAAI,OAAO,IAAI,KAAK,QAAQ,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,GAAG,EAAE;AAC5D,QAAI,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;AACzB,SAAK,CAAC,GAAG,CAAC,KAAK,CAAC,8BAA8B,GAAG,IAAI,CAAC,CAAC;AACvD,UAAM,GAAG,IAAI,CAAC;GACf,MAAM,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;;AAE5B,WAAO;GACR;;AAED,MAAI,MAAM,EAAE;;GAEX,MAAM;;;;AAIL,WAAK,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;;AAExB,UAAI,EAAE,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,UAAU,IAAI,EAAE;AACxC,eAAO,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,MAAM,CAAC,CAC9B,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;OACvC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;;;AAGb,WAAK,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,IAAI,MAAM,CAAC,EAAE,CAAC,CAAC;KAClC;CACF","file":"add-compiled.js","sourcesContent":["'use strict';\n\nvar utils = require('../utils');\n\n// internal\nvar reEscComments = /\\\\#/g;\n// note that '^^' is used in place of escaped comments\nvar reUnescapeComments = /\\^\\^/g;\nvar reComments = /#.*$/;\nvar reEscapeChars = /[.|\\-[\\]()\\\\]/g;\nvar reAsterisk = /\\*/g;\n\nmodule.exports = add;\n\n/**\n * Coverts file patterns or regular expressions to nodemon\n * compatible RegExp matching rules. Note: the `rules` argument\n * object is modified to include the new rule and new RegExp\n *\n * ### Example:\n *\n *     var rules = { watch: [], ignore: [] };\n *     add(rules, 'watch', '*.js');\n *     add(rules, 'ignore', '/public/');\n *     add(rules, 'watch', ':(\\d)*\\.js'); // note: string based regexp\n *     add(rules, 'watch', /\\d*\\.js/);\n *\n * @param {Object} rules containing `watch` and `ignore`. Also updated during\n *                       execution\n * @param {String} which must be either \"watch\" or \"ignore\"\n * @param {String|RegExp} the actual rule.\n */\nfunction add(rules, which, rule) {\n  if (!{ ignore: 1, watch: 1}[which]) {\n    throw new Error('rules/index.js#add requires \"ignore\" or \"watch\" as the ' +\n      'first argument');\n  }\n\n  if (Array.isArray(rule)) {\n    rule.forEach(function (rule) {\n      add(rules, which, rule);\n    });\n    return;\n  }\n\n  // support the rule being a RegExp, but reformat it to\n  // the custom :<regexp> format that we're working with.\n  if (rule instanceof RegExp) {\n    // rule = ':' + rule.toString().replace(/^\\/(.*?)\\/$/g, '$1');\n    utils.log.error('RegExp format no longer supported, but globs are.');\n    return;\n  }\n\n  // remove comments and trim lines\n  // this mess of replace methods is escaping \"\\#\" to allow for emacs temp files\n\n  // first up strip comments and remove blank head or tails\n  rule = (rule || '').replace(reEscComments, '^^')\n             .replace(reComments, '')\n             .replace(reUnescapeComments, '#').trim();\n\n  var regexp = false;\n\n  if (typeof rule === 'string' && rule.substring(0, 1) === ':') {\n    rule = rule.substring(1);\n    utils.log.error('RegExp no longer supported: ' + rule);\n    regexp = true;\n  } else if (rule.length === 0) {\n    // blank line (or it was a comment)\n    return;\n  }\n\n  if (regexp) {\n    // rules[which].push(rule);\n  } else {\n    // rule = rule.replace(reEscapeChars, '\\\\$&')\n    // .replace(reAsterisk, '.*');\n\n    rules[which].push(rule);\n    // compile a regexp of all the rules for this ignore or watch\n    var re = rules[which].map(function (rule) {\n      return rule.replace(reEscapeChars, '\\\\$&')\n                 .replace(reAsterisk, '.*');\n    }).join('|');\n\n    // used for the directory matching\n    rules[which].re = new RegExp(re);\n  }\n}"]}