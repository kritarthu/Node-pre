{"version":3,"sources":["bus.js"],"names":[],"mappings":";;AAAA,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC/B,IAAI,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,CAAC;AACxC,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;;AAE3B,IAAI,GAAG,GAAG,SAAN,GAAG,GAAe;AACpB,QAAM,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;CAChC,CAAC;;AAEF,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,MAAM,CAAC,YAAY,CAAC,CAAC;;AAExC,IAAI,GAAG,GAAG,IAAI,GAAG,EAAE,CAAC;;;AAGpB,IAAI,SAAS,GAAG,EAAE,CAAC;AACnB,GAAG,CAAC,EAAE,CAAC,aAAa,EAAE,UAAU,KAAK,EAAE;AACrC,OAAK,CAAC,2BAA2B,EAAE,KAAK,EAAE,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC;AACvE,MAAI,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE;AACrB,aAAS,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;AACxB,OAAG,CAAC,EAAE,CAAC,KAAK,EAAE,YAAY;AACxB,WAAK,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;KAC9B,CAAC,CAAC;GACJ;CACF,CAAC,CAAC;;;;;AAKH,OAAO,CAAC,EAAE,CAAC,SAAS,EAAE,UAAU,KAAK,EAAE;AACrC,OAAK,CAAC,qBAAqB,EAAE,KAAK,CAAC,CAAC;AACpC,KAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;CACjB,CAAC,CAAC;;AAEH,IAAI,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC;;;;AAIpB,IAAI,OAAO,CAAC,IAAI,EAAE;AAChB,KAAG,CAAC,IAAI,GAAG,UAAU,KAAK,EAAE,IAAI,EAAE;AAChC,WAAO,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;AAC1C,QAAI,CAAC,KAAK,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;GAC5B,CAAC;CACH;;AAED,MAAM,CAAC,OAAO,GAAG,GAAG,CAAC","file":"bus-compiled.js","sourcesContent":["var events = require('events');\nvar debug = require('debug')('nodemon');\nvar util = require('util');\n\nvar Bus = function () {\n  events.EventEmitter.call(this);\n};\n\nutil.inherits(Bus, events.EventEmitter);\n\nvar bus = new Bus();\n\n// /*\nvar collected = {};\nbus.on('newListener', function (event) {\n  debug('bus new listener: %s (%s)', event, bus.listeners(event).length);\n  if (!collected[event]) {\n    collected[event] = true;\n    bus.on(event, function () {\n      debug('bus emit: %s', event);\n    });\n  }\n});\n\n// */\n\n// proxy process messages (if forked) to the bus\nprocess.on('message', function (event) {\n  debug('process.message(%s)', event);\n  bus.emit(event);\n});\n\nvar emit = bus.emit;\n\n// if nodemon was spawned via a fork, allow upstream communication\n// via process.send\nif (process.send) {\n  bus.emit = function (event, data) {\n    process.send({ type: event, data: data });\n    emit.apply(bus, arguments);\n  };\n}\n\nmodule.exports = bus;\n"]}