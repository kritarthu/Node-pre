{"version":3,"sources":["merge.js"],"names":[],"mappings":";;AAAA,IAAI,KAAK,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;;AAE/B,MAAM,CAAC,OAAO,GAAG,KAAK,CAAC;;AAEvB,SAAS,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE;AACxB,SAAO,AAAC,OAAO,CAAC,KAAK,OAAO,CAAC,IAAM,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,AAAC,CAAC;CAC3E;;;;;;;;AAQD,SAAS,KAAK,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE;AACrC,MAAI,MAAM,KAAK,SAAS,EAAE;AACxB,UAAM,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC;GACxB;;;AAGD,QAAM,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,UAAU,GAAG,EAAE;AACxD,QAAI,MAAM,CAAC,GAAG,CAAC,KAAK,SAAS,EAAE;AAC7B,YAAM,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;KAC3B;GACF,CAAC,CAAC;;AAEH,QAAM,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,UAAU,GAAG,EAAE;AACxD,QAAI,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;;AAExB,QAAI,MAAM,CAAC,GAAG,CAAC,IAAI,UAAU,CAAC,KAAK,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE;;AAEjD,UAAI,KAAK,KAAK,EAAE,EAAE;AAChB,cAAM,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;OAC3B;;AAED,UAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;AACxB,YAAI,KAAK,CAAC,MAAM,KAAK,CAAC,IAAI,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE;AAC5C,gBAAM,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;SACpC;OACF,MAAM,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;AACpC,cAAM,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,KAAK,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;OACzC;KACF;GACF,CAAC,CAAC;;AAEH,SAAO,MAAM,CAAC;CACf","file":"merge-compiled.js","sourcesContent":["var clone = require('./clone');\n\nmodule.exports = merge;\n\nfunction typesMatch(a, b) {\n  return (typeof a === typeof b) && (Array.isArray(a) === Array.isArray(b));\n}\n\n/**\n * A deep merge of the source based on the target.\n * @param  {Object} source   [description]\n * @param  {Object} target   [description]\n * @return {Object}          [description]\n */\nfunction merge(source, target, result) {\n  if (result === undefined) {\n    result = clone(source);\n  }\n\n  // merge missing values from the target to the source\n  Object.getOwnPropertyNames(target).forEach(function (key) {\n    if (source[key] === undefined) {\n      result[key] = target[key];\n    }\n  });\n\n  Object.getOwnPropertyNames(source).forEach(function (key) {\n    var value = source[key];\n\n    if (target[key] && typesMatch(value, target[key])) {\n      // merge empty values\n      if (value === '') {\n        result[key] = target[key];\n      }\n\n      if (Array.isArray(value)) {\n        if (value.length === 0 && target[key].length) {\n          result[key] = target[key].slice(0);\n        }\n      } else if (typeof value === 'object') {\n        result[key] = merge(value, target[key]);\n      }\n    }\n  });\n\n  return result;\n}"]}