{"version":3,"sources":["osenv.js"],"names":[],"mappings":"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","file":"osenv-compiled.js","sourcesContent":["var isWindows = process.platform === 'win32'\nvar path = require('path')\nvar exec = require('child_process').exec\nvar osTmpdir = require('os-tmpdir')\nvar osHomedir = require('os-homedir')\n\n// looking up envs is a bit costly.\n// Also, sometimes we want to have a fallback\n// Pass in a callback to wait for the fallback on failures\n// After the first lookup, always returns the same thing.\nfunction memo (key, lookup, fallback) {\n  var fell = false\n  var falling = false\n  exports[key] = function (cb) {\n    var val = lookup()\n    if (!val && !fell && !falling && fallback) {\n      fell = true\n      falling = true\n      exec(fallback, function (er, output, stderr) {\n        falling = false\n        if (er) return // oh well, we tried\n        val = output.trim()\n      })\n    }\n    exports[key] = function (cb) {\n      if (cb) process.nextTick(cb.bind(null, null, val))\n      return val\n    }\n    if (cb && !falling) process.nextTick(cb.bind(null, null, val))\n    return val\n  }\n}\n\nmemo('user', function () {\n  return ( isWindows\n         ? process.env.USERDOMAIN + '\\\\' + process.env.USERNAME\n         : process.env.USER\n         )\n}, 'whoami')\n\nmemo('prompt', function () {\n  return isWindows ? process.env.PROMPT : process.env.PS1\n})\n\nmemo('hostname', function () {\n  return isWindows ? process.env.COMPUTERNAME : process.env.HOSTNAME\n}, 'hostname')\n\nmemo('tmpdir', function () {\n  return osTmpdir()\n})\n\nmemo('home', function () {\n  return osHomedir()\n})\n\nmemo('path', function () {\n  return (process.env.PATH ||\n          process.env.Path ||\n          process.env.path).split(isWindows ? ';' : ':')\n})\n\nmemo('editor', function () {\n  return process.env.EDITOR ||\n         process.env.VISUAL ||\n         (isWindows ? 'notepad.exe' : 'vi')\n})\n\nmemo('shell', function () {\n  return isWindows ? process.env.ComSpec || 'cmd'\n         : process.env.SHELL || 'bash'\n})\n"]}