{"version":3,"sources":["test.js"],"names":[],"mappings":"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","file":"test-compiled.js","sourcesContent":["var path = require('path');\nvar test  = require('tape');\nvar chalk = require('chalk');\nvar cp = require('child_process');\nvar psTree = require('../');\n\nvar red = chalk.red,\n    green = chalk.green,\n    cyan = chalk.cyan;\n\nvar scripts = {\n  parent: path.join(__dirname, 'exec', 'parent.js'),\n  child: path.join(__dirname, 'exec', 'child.js')\n};\n\ntest(cyan('Spawn a Parent process which has a Two Child Processes'), function (t) {\n  var parent = cp.exec('node ' + scripts.parent, function (error, stdout, stderr) {});\n  setTimeout(function () {\n    psTree(parent.pid, function (err, children) {\n      if (err) { console.log(err); }\n      console.log(red('Children: '), children, '\\n');\n      t.true(children.length > 0, green('✓ There are ' + children.length + ' active child processes'));\n      cp.spawn('kill', ['-9'].concat(children.map(function (p) { return p.PID })))\n    });\n\n    setTimeout(function () {\n      psTree(parent.pid, function (err, children) {\n        if (err) { console.log(err); }\n        // console.log('Children: ', children, '\\n');\n        // console.log(' ')\n        t.equal(children.length, 0, green('✓ No more active child processes (we killed them)'));\n        t.end();\n      });\n    }, 1000); // give psTree time to kill the processes\n  }, 200); // give the child process time to spawn\n});\n\ntest(cyan('FORCE ERROR by calling psTree without supplying a Callback'), function (t) {\n  var errmsg = 'Error: childrenOfPid(pid, callback) expects callback'\n  // Attempt to call psTree without a callback\n  try { psTree(1234); }\n  catch (e) {\n    t.equal(e.toString(), errmsg, green('✓ Fails when no callback supplied (as expected)'))\n  }\n\n  t.end();\n});\n\n\ntest(cyan('Spawn a Child Process and psTree with a String as pid'), function (t) {\n  var child = cp.exec('node ' + scripts.child, function(error, stdout, stderr) {});\n  setTimeout(function(){\n    psTree(child.pid.toString(), function (err, children) {\n      if (err) { console.log(err); }\n      cp.spawn('kill', ['-9'].concat(children.map(function (p) { return p.PID })))\n    });\n\n    setTimeout(function() {\n      psTree(child.pid.toString(), function (err, children) {\n        if (err) { console.log(err); }\n        t.equal(children.length, 0, green('✓ No more active child processes'));\n        t.end();\n      });\n    }, 1000); // give psTree time to kill the processes\n  }, 200); // give the child process time to spawn\n});\n"]}