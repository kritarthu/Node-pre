{"version":3,"sources":["async-map.js"],"names":[],"mappings":";;;;;;;;;;;;;AAWA,MAAM,CAAC,OAAO,GAAG,QAAQ,CAAA;;AAEzB,SAAS,QAAQ,GAAI;AACnB,MAAI,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC;MAC7C,IAAI,GAAG,KAAK,CAAC,KAAK,EAAE,IAAI,EAAE;MAC1B,GAAG,GAAG,KAAK,CAAC,GAAG,EAAE,CAAA;AACrB,MAAI,OAAO,GAAG,KAAK,UAAU,EAAE,MAAM,IAAI,KAAK,CAC5C,kCAAkC,CAAC,CAAA;AACrC,MAAI,CAAC,IAAI,EAAE,OAAO,GAAG,CAAC,IAAI,EAAE,EAAE,CAAC,CAAA;AAC/B,MAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,GAAG,CAAC,IAAI,CAAC,CAAA;AACvC,MAAI,CAAC,GAAG,KAAK,CAAC,MAAM;MAChB,IAAI,GAAG,EAAE;;AACT,UAAQ,GAAG,IAAI;MACf,CAAC,GAAG,IAAI,CAAC,MAAM;MACf,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;AACb,MAAI,CAAC,CAAC,EAAE,OAAO,GAAG,CAAC,IAAI,EAAE,EAAE,CAAC,CAAA;AAC5B,WAAS,EAAE,CAAE,EAAE,EAAE;AACf,QAAI,EAAE,IAAI,CAAC,QAAQ,EAAE,QAAQ,GAAG,EAAE,CAAA;;AAElC,QAAI,MAAM,GAAG,SAAS,CAAC,MAAM,CAAA;AAC7B,SAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAG,EAAE,IAAI,SAAS,CAAC,CAAC,CAAC,KAAK,SAAS,EAAE;AAChE,UAAI,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAA,CAAE,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAA;KACvD;;AAED,QAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;AACnB,UAAI,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;AAC3B,OAAC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAA,GAAI,CAAC,CAAA;AAC1B,OAAC,GAAG,IAAI,CAAC,MAAM,CAAA;AACf,aAAO,CAAC,QAAQ,CAAC,YAAY;AAC3B,eAAO,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE;AAC5B,eAAK,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE;AAAE,cAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAA;WAAE,CAAC,CAAA;SAC5C,CAAC,CAAA;OACH,CAAC,CAAA;KACH;;AAED,QAAI,EAAE,CAAC,KAAK,CAAC,EAAE,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAA;GACxD;;;AAGD,MAAI,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE;AACzB,SAAK,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE;AAAE,QAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAA;KAAE,CAAC,CAAA;GAC5C,CAAC,CAAA;CACH","file":"async-map-compiled.js","sourcesContent":["\n/*\nusage:\n\n// do something to a list of things\nasyncMap(myListOfStuff, function (thing, cb) { doSomething(thing.foo, cb) }, cb)\n// do more than one thing to each item\nasyncMap(list, fooFn, barFn, cb)\n\n*/\n\nmodule.exports = asyncMap\n\nfunction asyncMap () {\n  var steps = Array.prototype.slice.call(arguments)\n    , list = steps.shift() || []\n    , cb_ = steps.pop()\n  if (typeof cb_ !== \"function\") throw new Error(\n    \"No callback provided to asyncMap\")\n  if (!list) return cb_(null, [])\n  if (!Array.isArray(list)) list = [list]\n  var n = steps.length\n    , data = [] // 2d array\n    , errState = null\n    , l = list.length\n    , a = l * n\n  if (!a) return cb_(null, [])\n  function cb (er) {\n    if (er && !errState) errState = er\n\n    var argLen = arguments.length\n    for (var i = 1; i < argLen; i ++) if (arguments[i] !== undefined) {\n      data[i - 1] = (data[i - 1] || []).concat(arguments[i])\n    }\n    // see if any new things have been added.\n    if (list.length > l) {\n      var newList = list.slice(l)\n      a += (list.length - l) * n\n      l = list.length\n      process.nextTick(function () {\n        newList.forEach(function (ar) {\n          steps.forEach(function (fn) { fn(ar, cb) })\n        })\n      })\n    }\n\n    if (--a === 0) cb_.apply(null, [errState].concat(data))\n  }\n  // expect the supplied cb function to be called\n  // \"n\" times for each thing in the array.\n  list.forEach(function (ar) {\n    steps.forEach(function (fn) { fn(ar, cb) })\n  })\n}\n"]}