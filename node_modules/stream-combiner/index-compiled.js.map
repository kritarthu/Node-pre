{"version":3,"sources":["index.js"],"names":[],"mappings":";;AAAA,IAAI,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC,CAAA;;AAElC,MAAM,CAAC,OAAO,GAAG,YAAY;;AAE3B,MAAI,OAAO,GAAG,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC;MAClC,KAAK,GAAG,OAAO,CAAC,CAAC,CAAC;MAClB,IAAI,GAAG,OAAO,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;MAClC,OAAO,GAAG,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,CAAA;;AAEnC,MAAG,OAAO,CAAC,MAAM,IAAI,CAAC,EACpB,OAAO,OAAO,CAAC,CAAC,CAAC,CAAA,KACd,IAAI,CAAC,OAAO,CAAC,MAAM,EACtB,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAA;;;;AAInD,WAAS,OAAO,CAAE,OAAO,EAAE;AACzB,QAAG,OAAO,CAAC,MAAM,GAAG,CAAC,EACnB,OAAM;AACR,WAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAA;AAC3B,WAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAA;GAC1B;;AAED,SAAO,CAAC,OAAO,CAAC,CAAA;;AAEhB,WAAS,OAAO,GAAI;AAClB,QAAI,IAAI,GAAG,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;AACnC,QAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA;AACrB,WAAO,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,CAAA;GAClC;;;;AAID,OAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,EAAG,EACzC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,CAAA;;AAEjC,SAAO,OAAO,CAAA;CACf,CAAA","file":"index-compiled.js","sourcesContent":["var duplexer = require('duplexer')\n\nmodule.exports = function () {\n\n  var streams = [].slice.call(arguments)\n    , first = streams[0]\n    , last = streams[streams.length - 1]\n    , thepipe = duplexer(first, last)\n\n  if(streams.length == 1)\n    return streams[0]\n  else if (!streams.length)\n    throw new Error('connect called with empty args')\n\n  //pipe all the streams together\n\n  function recurse (streams) {\n    if(streams.length < 2)\n      return\n    streams[0].pipe(streams[1])\n    recurse(streams.slice(1))  \n  }\n  \n  recurse(streams)\n \n  function onerror () {\n    var args = [].slice.call(arguments)\n    args.unshift('error')\n    thepipe.emit.apply(thepipe, args)\n  }\n  \n  //es.duplex already reemits the error from the first and last stream.\n  //add a listener for the inner streams in the pipeline.\n  for(var i = 1; i < streams.length - 1; i ++)\n    streams[i].on('error', onerror)\n\n  return thepipe\n}\n\n"]}