{"version":3,"sources":["index.js"],"names":[],"mappings":";;AAAA,IAAI,EAAE,GAAG,OAAO,CAAC,cAAc,CAAC,CAAA;AAChC,IAAI,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,CAAA;AAC3B,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAA;;AAE1B,IAAI,CAAC,yBAAyB,EAAE,UAAU,IAAI,EAAE;;AAE9C,MAAI,MAAM,GAAG,CAAC,CAAC;AACf,MAAI,IAAI,GAAG,OAAO,CAChB,EAAE,CAAC,OAAO,CAAC,UAAS,IAAI,EAAE;AACxB,WAAO,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;GAChC,CAAC,EACF,EAAE,CAAC,OAAO,CAAC,UAAS,IAAI,EAAE;AACxB,WAAO,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;GAC5C,CAAC,CACH,CAAA;;AAED,MAAI,CAAC,EAAE,CAAC,OAAO,EAAE,UAAS,GAAG,EAAE;AAC7B,UAAM,EAAE,CAAA;AACR,QAAI,CAAC,EAAE,CAAC,MAAM,EAAE,sBAAsB,CAAC,CAAA;AACrC,WAAO,CAAC,QAAQ,CAAC,YAAY;AAC3B,aAAO,IAAI,CAAC,GAAG,EAAE,CAAC;KACnB,CAAC,CAAA;GACL,CAAC,CAAA;;AAEF,SAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;CAC1B,CAAC,CAAA;;AAEF,IAAI,CAAC,gCAAgC,EAAE,UAAU,IAAI,EAAE;;AAErD,MAAI,MAAM,GAAG,CAAC,CAAC;AACf,MAAI,IAAI,GAAG,OAAO,CAChB,EAAE,CAAC,OAAO,CAAC,UAAS,IAAI,EAAE;AACxB,WAAO,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;GAChC,CAAC,EACF,EAAE,CAAC,OAAO,CAAC,UAAS,IAAI,EAAE;AACxB,WAAO,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;GAC5C,CAAC,EACF,EAAE,CAAC,OAAO,EAAE,CACb,CAAA;;AAED,MAAI,CAAC,EAAE,CAAC,OAAO,EAAE,UAAS,GAAG,EAAE;AAC7B,UAAM,EAAE,CAAA;AACR,QAAI,CAAC,EAAE,CAAC,MAAM,EAAE,sBAAsB,CAAC,CAAA;AACrC,WAAO,CAAC,QAAQ,CAAC,YAAY;AAC3B,aAAO,IAAI,CAAC,GAAG,EAAE,CAAC;KACnB,CAAC,CAAA;GACL,CAAC,CAAA;;AAEF,SAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;CAE1B,CAAC,CAAA","file":"index-compiled.js","sourcesContent":["var es = require('event-stream')\nvar combine = require('..')\nvar test = require('tape')\n\ntest('do not duplicate errors', function (test) {\n\n  var errors = 0;\n  var pipe = combine(\n    es.through(function(data) {\n      return this.emit('data', data);\n    }),\n    es.through(function(data) {\n      return this.emit('error', new Error(data));\n    })\n  )\n\n  pipe.on('error', function(err) {\n    errors++\n    test.ok(errors, 'expected error count')\n      process.nextTick(function () {\n        return test.end();\n      })\n  })\n\n  return pipe.write('meh');\n})\n\ntest('3 pipe do not duplicate errors', function (test) {\n\n  var errors = 0;\n  var pipe = combine(\n    es.through(function(data) {\n      return this.emit('data', data);\n    }),\n    es.through(function(data) {\n      return this.emit('error', new Error(data));\n    }),\n    es.through()\n  )\n\n  pipe.on('error', function(err) {\n    errors++\n    test.ok(errors, 'expected error count')\n      process.nextTick(function () {\n        return test.end();\n      })\n  })\n\n  return pipe.write('meh');\n\n})\n\n"]}