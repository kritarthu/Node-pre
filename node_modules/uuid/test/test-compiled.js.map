{"version":3,"sources":["test.js"],"names":[],"mappings":";;AAAA,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;;AAE/B,IAAI,IAAI,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;;;AAG1B,IAAI,IAAI,GAAG,aAAa,CAAC;;AAEzB,SAAS,OAAO,CAAC,IAAI,EAAE,GAAG,EAAE;AAC1B,MAAI,CAAC,IAAI,EAAE,YAAW;;AAEpB,SAAK,IAAI,CAAC,GAAC,CAAC,EAAG,CAAC,GAAC,GAAG,CAAC,MAAM,EAAG,EAAE,CAAC,EAAE;AACjC,SAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KAChD;AACD,OAAG,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;AACjB,QAAI,MAAM,GAAG,AAAC,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAE,IAAI,EAAE,CAAC;;AAErC,UAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,IAAI,GAAG,CAAC,QAAQ,EAAE,EAAE,IAAI,GAAG,sBAAsB,CAAC,CAAC;GAC5E,CAAC,CAAC;CACJ;;;AAGD,OAAO,CAAC,yBAAyB,EAAE,CACjC,IAAI,CAAC,EAAE,EAAE,EACT,IAAI,CAAC,EAAE,EAAE,EACT,IAAI,CAAC,EAAE,EAAE,EACT,IAAI,CAAC,EAAE,EAAE,EACT,IAAI,CAAC,EAAE,EAAE,CACV,CAAC,CAAC;;;AAGH,OAAO,CAAC,wBAAwB,EAAE,CAChC,IAAI,CAAC,EAAE,CAAC,EAAC,KAAK,EAAE,IAAI,GAAG,EAAE,GAAC,IAAI,GAAC,IAAI,EAAC,CAAC,EACrC,IAAI,CAAC,EAAE,CAAC,EAAC,KAAK,EAAE,IAAI,GAAG,CAAC,EAAC,CAAC,EAC1B,IAAI,CAAC,EAAE,CAAC,EAAC,KAAK,EAAE,IAAI,EAAC,CAAC,EACtB,IAAI,CAAC,EAAE,CAAC,EAAC,KAAK,EAAE,IAAI,GAAG,CAAC,EAAC,CAAC,EAC1B,IAAI,CAAC,EAAE,CAAC,EAAC,KAAK,EAAE,IAAI,GAAG,EAAE,GAAC,EAAE,GAAC,IAAI,GAAC,IAAI,EAAC,CAAC,CACzC,CAAC,CAAC;;AAEH,IAAI,CAAC,MAAM,EAAE,YAAW;AACtB,QAAM,CACJ,IAAI,CAAC,EAAE,CAAC,EAAC,KAAK,EAAE,IAAI,EAAC,CAAC,IAAI,IAAI,CAAC,EAAE,CAAC,EAAC,KAAK,EAAE,IAAI,EAAC,CAAC,EAChD,wCAAwC,CACzC,CAAC;CACH,CAAC,CAAC;;AAEH,IAAI,CAAC,gDAAgD,EAAE,YAAW;;AAEhE,MAAI,MAAM,GAAG,KAAK,CAAC;AACnB,MAAI;AACF,QAAI,CAAC,EAAE,CAAC,EAAC,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAC,CAAC,CAAC;GACtC,CAAC,OAAO,CAAC,EAAE;AACV,UAAM,GAAG,IAAI,CAAC;GACf;AACD,QAAM,CAAC,MAAM,EAAE,iDAAiD,CAAC,CAAC;CACnE,CAAC,CAAC;;AAEH,IAAI,CAAC,0BAA0B,EAAE,YAAW;;AAE1C,MAAI,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,EAAC,KAAK,EAAE,IAAI,EAAC,CAAC,CAAC;AAClC,MAAI,KAAK,GAAG,IAAI,CAAC,EAAE,CAAC,EAAC,KAAK,EAAE,IAAI,GAAG,CAAC,EAAC,CAAC,CAAC;AACvC,QAAM,CACJ,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,CAAC,EAC1E,kDAAkD,CACnD,CAAC;CACH,CAAC,CAAC;;AAEH,IAAI,CAAC,0BAA0B,EAAE,YAAW;;AAE1C,MAAI,KAAK,GAAG,IAAI,CAAC,EAAE,CAAC,EAAC,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE,EAAC,CAAC,CAAC;AAC9C,MAAI,MAAM,GAAG,IAAI,CAAC,EAAE,CAAC,EAAC,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,EAAC,CAAC,CAAC;AAC9C,QAAM,CACJ,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,CAAC,EAC5E,kDAAkD,CACnD,CAAC;CACH,CAAC,CAAC;;AAEH,IAAI,CAAC,sCAAsC,EAAE,YAAW;;AAEtD,MAAI,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;AACf,SAAK,EAAE,aAAa;AACpB,SAAK,EAAE,IAAI;AACX,YAAQ,EAAE,MAAM;AAChB,QAAI,EAAE,CAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAE;GAC7C,CAAC,CAAC;AACH,QAAM,CAAC,EAAE,IAAI,sCAAsC,EAAE,sCAAsC,CAAC,CAAC;CAC9F,CAAC,CAAC;;AAEH,IAAI,CAAC,2CAA2C,EAAE,YAAW;;AAE3D,MAAI,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC,EAAC,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAC,CAAC,CAAC;AAC7C,MAAI,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC,EAAC,KAAK,EAAE,IAAI,GAAG,CAAC,EAAE,KAAK,EAAE,CAAC,EAAC,CAAC,CAAC;;AAE9C,MAAI,MAAM,GAAG,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAAE,KAAK,GAAG,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACxD,MAAI,EAAE,GAAG,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;AACpD,QAAM,CAAC,EAAE,KAAK,CAAC,EAAE,2CAA2C,CAAC,CAAC;CAC/D,CAAC,CAAC;;AAEH,IAAI,CAAC,eAAe,EAAE,YAAW;AAC/B,MAAI,EAAE,GAAG,kCAAkC,CAAC;AAC5C,QAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,EAAC,EAAE,CAAC,CAAC,CAAC,IAC9C,sCAAsC,EAAE,aAAa,CAAC,CAAC;AACzD,QAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,uBAAuB,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,IAChE,sCAAsC,EAAE,aAAa,CAAC,CAAC;CAC1D,CAAC,CAAC","file":"test-compiled.js","sourcesContent":["var assert = require('assert');\n\nvar uuid = require('../');\n\n// Verify ordering of v1 ids created with explicit times\nvar TIME = 1321644961388; // 2011-11-18 11:36:01.388-08:00\n\nfunction compare(name, ids) {\n  test(name, function() {\n    // avoid .map for older browsers\n    for (var i=0 ; i<ids.length ; ++i) {\n      ids[i] = ids[i].split('-').reverse().join('-');\n    }\n    ids = ids.sort();\n    var sorted = ([].concat(ids)).sort();\n\n    assert(sorted.toString() == ids.toString(), name + ' have expected order');\n  });\n}\n\n// Verify ordering of v1 ids created using default behavior\ncompare('uuids with current time', [\n  uuid.v1(),\n  uuid.v1(),\n  uuid.v1(),\n  uuid.v1(),\n  uuid.v1()\n]);\n\n// Verify ordering of v1 ids created with explicit times\ncompare('uuids with time option', [\n  uuid.v1({msecs: TIME - 10*3600*1000}),\n  uuid.v1({msecs: TIME - 1}),\n  uuid.v1({msecs: TIME}),\n  uuid.v1({msecs: TIME + 1}),\n  uuid.v1({msecs: TIME + 28*24*3600*1000})\n]);\n\ntest('msec', function() {\n  assert(\n    uuid.v1({msecs: TIME}) != uuid.v1({msecs: TIME}),\n    'IDs created at same msec are different'\n  );\n});\n\ntest('exception thrown when > 10k ids created in 1ms', function() {\n  // Verify throw if too many ids created\n  var thrown = false;\n  try {\n    uuid.v1({msecs: TIME, nsecs: 10000});\n  } catch (e) {\n    thrown = true;\n  }\n  assert(thrown, 'Exception thrown when > 10K ids created in 1 ms');\n});\n\ntest('clock regression by msec', function() {\n  // Verify clock regression bumps clockseq\n  var uidt = uuid.v1({msecs: TIME});\n  var uidtb = uuid.v1({msecs: TIME - 1});\n  assert(\n    parseInt(uidtb.split('-')[3], 16) - parseInt(uidt.split('-')[3], 16) === 1,\n    'Clock regression by msec increments the clockseq'\n  );\n});\n\ntest('clock regression by nsec', function() {\n  // Verify clock regression bumps clockseq\n  var uidtn = uuid.v1({msecs: TIME, nsecs: 10});\n  var uidtnb = uuid.v1({msecs: TIME, nsecs: 9});\n  assert(\n    parseInt(uidtnb.split('-')[3], 16) - parseInt(uidtn.split('-')[3], 16) === 1,\n    'Clock regression by nsec increments the clockseq'\n  );\n});\n\ntest('explicit options product expected id', function() {\n  // Verify explicit options produce expected id\n  var id = uuid.v1({\n    msecs: 1321651533573,\n    nsecs: 5432,\n    clockseq: 0x385c,\n    node: [ 0x61, 0xcd, 0x3c, 0xbb, 0x32, 0x10 ]\n  });\n  assert(id == 'd9428888-122b-11e1-b85c-61cd3cbb3210', 'Explicit options produce expected id');\n});\n\ntest('ids spanning 1ms boundary are 100ns apart', function() {\n  // Verify adjacent ids across a msec boundary are 1 time unit apart\n  var u0 = uuid.v1({msecs: TIME, nsecs: 9999});\n  var u1 = uuid.v1({msecs: TIME + 1, nsecs: 0});\n\n  var before = u0.split('-')[0], after = u1.split('-')[0];\n  var dt = parseInt(after, 16) - parseInt(before, 16);\n  assert(dt === 1, 'Ids spanning 1ms boundary are 100ns apart');\n});\n\ntest('parse/unparse', function() {\n  var id = '00112233445566778899aabbccddeeff';\n  assert(uuid.unparse(uuid.parse(id.substr(0,10))) ==\n    '00112233-4400-0000-0000-000000000000', 'Short parse');\n  assert(uuid.unparse(uuid.parse('(this is the uuid -> ' + id + id)) ==\n    '00112233-4455-6677-8899-aabbccddeeff', 'Dirty parse');\n});\n\n"]}