{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["'use strict';\nvar stringWidth = require('string-width');\n\nvar ESCAPES = [\n\t'\\u001b',\n\t'\\u009b'\n];\n\nvar END_CODE = 39;\n\nvar ESCAPE_CODES = {\n\t0: 0,\n\t1: 22,\n\t2: 22,\n\t3: 23,\n\t4: 24,\n\t7: 27,\n\t8: 28,\n\t9: 29,\n\t30: 39,\n\t31: 39,\n\t32: 39,\n\t33: 39,\n\t34: 39,\n\t35: 39,\n\t36: 39,\n\t37: 39,\n\t90: 39,\n\t40: 49,\n\t41: 49,\n\t42: 49,\n\t43: 49,\n\t44: 49,\n\t45: 49,\n\t46: 49,\n\t47: 49\n};\n\nfunction wrapAnsi(code) {\n\treturn ESCAPES[0] + '[' + code + 'm';\n}\n\n// calculate the length of words split on ' ', ignoring\n// the extra characters added by ansi escape codes.\nfunction wordLengths(str) {\n\treturn str.split(' ').map(function (s) {\n\t\treturn stringWidth(s);\n\t});\n}\n\n// wrap a long word across multiple rows.\n// ansi escape codes do not count towards length.\nfunction wrapWord(rows, word, cols) {\n\tvar insideEscape = false;\n\tvar visible = rows[rows.length - 1].length;\n\n\tfor (var i = 0; i < word.length; i++) {\n\t\tvar x = word[i];\n\n\t\trows[rows.length - 1] += x;\n\n\t\tif (ESCAPES.indexOf(x) !== -1) {\n\t\t\tinsideEscape = true;\n\t\t} else if (insideEscape && x === 'm') {\n\t\t\tinsideEscape = false;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (insideEscape) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tvisible++;\n\n\t\tif (visible >= cols && i < word.length - 1) {\n\t\t\trows.push('');\n\t\t\tvisible = 0;\n\t\t}\n\t}\n\n\t// it's possible that the last row we copy over is only\n\t// ansi escape characters, handle this edge-case.\n\tif (!visible && rows[rows.length - 1].length > 0 && rows.length > 1) {\n\t\trows[rows.length - 2] += rows.pop();\n\t}\n}\n\n// the wrap-ansi module can be invoked\n// in either 'hard' or 'soft' wrap mode.\n//\n// 'hard' will never allow a string to take up more\n// than cols characters.\n//\n// 'soft' allows long words to expand past the column length.\nfunction exec(str, cols, opts) {\n\tvar options = opts || {};\n\n\tvar pre = '';\n\tvar ret = '';\n\tvar escapeCode;\n\n\tvar lengths = wordLengths(str);\n\tvar words = str.split(' ');\n\tvar rows = [''];\n\n\tfor (var i = 0, word; (word = words[i]) !== undefined; i++) {\n\t\tvar rowLength = stringWidth(rows[rows.length - 1]);\n\n\t\tif (rowLength) {\n\t\t\trows[rows.length - 1] += ' ';\n\t\t\trowLength++;\n\t\t}\n\n\t\t// in 'hard' wrap mode, the length of a line is\n\t\t// never allowed to extend past 'cols'.\n\t\tif (lengths[i] > cols && options.hard) {\n\t\t\tif (rowLength) {\n\t\t\t\trows.push('');\n\t\t\t}\n\t\t\twrapWord(rows, word, cols);\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (rowLength + lengths[i] > cols && rowLength > 0) {\n\t\t\trows.push('');\n\t\t}\n\n\t\trows[rows.length - 1] += word;\n\t}\n\n\tpre = rows.map(function (r) {\n\t\treturn r.trim();\n\t}).join('\\n');\n\n\tfor (var j = 0; j < pre.length; j++) {\n\t\tvar y = pre[j];\n\n\t\tret += y;\n\n\t\tif (ESCAPES.indexOf(y) !== -1) {\n\t\t\tvar code = parseFloat(/[0-9][^m]*/.exec(pre.slice(j, j + 4)));\n\t\t\tescapeCode = code === END_CODE ? null : code;\n\t\t}\n\n\t\tif (escapeCode && ESCAPE_CODES[escapeCode]) {\n\t\t\tif (pre[j + 1] === '\\n') {\n\t\t\t\tret += wrapAnsi(ESCAPE_CODES[escapeCode]);\n\t\t\t} else if (y === '\\n') {\n\t\t\t\tret += wrapAnsi(escapeCode);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn ret;\n}\n\n// for each line break, invoke the method separately.\nmodule.exports = function (str, cols, opts) {\n\treturn String(str).split('\\n').map(function (substr) {\n\t\treturn exec(substr, cols, opts);\n\t}).join('\\n');\n};\n"]}