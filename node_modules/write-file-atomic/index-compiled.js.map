{"version":3,"sources":["index.js"],"names":[],"mappings":"AAAA,YAAY,CAAA;AACZ,IAAI,EAAE,GAAG,OAAO,CAAC,aAAa,CAAC,CAAA;AAC/B,IAAI,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,KAAK,CAAA;AAClC,IAAI,WAAW,GAAG,OAAO,CAAC,aAAa,CAAC,CAAA;;AAExC,SAAS,SAAS,GAAI;AACpB,MAAI,IAAI,GAAG,IAAI,WAAW,EAAE,CAAA;AAC5B,OAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,SAAS,CAAC,MAAM,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,SAAS,CAAC,EAAE,CAAC,CAAC,CAAA;AAC3E,SAAO,IAAI,CAAC,MAAM,EAAE,CAAA;CACrB;AACD,IAAI,WAAW,GAAG,CAAC,CAAA;AACnB,IAAI,UAAU,GAAG,SAAb,UAAU,CAAa,QAAQ,EAAE;AACnC,SAAO,QAAQ,GAAG,GAAG,GAAG,SAAS,CAAC,UAAU,EAAE,OAAO,CAAC,GAAG,EAAE,EAAE,WAAW,CAAC,CAAA;CAC1E,CAAA;;AAED,MAAM,CAAC,OAAO,GAAG,SAAS,SAAS,CAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE;AACtE,MAAI,OAAO,YAAY,QAAQ,EAAE;AAC/B,YAAQ,GAAG,OAAO,CAAA;AAClB,WAAO,GAAG,IAAI,CAAA;GACf;AACD,MAAI,CAAC,OAAO,EAAE,OAAO,GAAG,EAAE,CAAA;AAC1B,MAAI,OAAO,GAAG,UAAU,CAAC,QAAQ,CAAC,CAAA;AAClC,OAAK,CAAC,CACJ,CAAC,EAAE,EAAE,EAAE,CAAC,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,EAC1C,OAAO,CAAC,KAAK,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,KAAK,EAAE,OAAO,EAAE,OAAO,CAAC,KAAK,CAAC,GAAG,EAAE,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,EAC9E,CAAC,EAAE,EAAE,EAAE,CAAC,MAAM,EAAE,OAAO,EAAE,QAAQ,CAAC,CACnC,EAAE,UAAU,GAAG,EAAE;AAChB,OAAG,GAAG,EAAE,CAAC,MAAM,CAAC,OAAO,EAAE,YAAY;AAAE,cAAQ,CAAC,GAAG,CAAC,CAAA;KAAE,CAAC,GACnD,QAAQ,EAAE,CAAA;GACf,CAAC,CAAA;CACH,CAAA;;AAED,MAAM,CAAC,OAAO,CAAC,IAAI,GAAG,SAAS,aAAa,CAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAE;AACrE,MAAI,CAAC,OAAO,EAAE,OAAO,GAAG,EAAE,CAAA;AAC1B,MAAI,OAAO,GAAG,UAAU,CAAC,QAAQ,CAAC,CAAA;AAClC,MAAI;AACF,MAAE,CAAC,aAAa,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,CAAA;AACxC,QAAI,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,SAAS,CAAC,OAAO,EAAE,OAAO,CAAC,KAAK,CAAC,GAAG,EAAE,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;AAC9E,MAAE,CAAC,UAAU,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAA;GACjC,CAAC,OAAO,GAAG,EAAE;AACZ,QAAI;AAAE,QAAE,CAAC,UAAU,CAAC,OAAO,CAAC,CAAA;KAAE,CAAC,OAAO,CAAC,EAAE,EAAE;AAC3C,UAAM,GAAG,CAAA;GACV;CACF,CAAA","file":"index-compiled.js","sourcesContent":["'use strict'\nvar fs = require('graceful-fs')\nvar chain = require('slide').chain\nvar MurmurHash3 = require('imurmurhash')\n\nfunction murmurhex () {\n  var hash = new MurmurHash3()\n  for (var ii = 0; ii < arguments.length; ++ii) hash.hash('' + arguments[ii])\n  return hash.result()\n}\nvar invocations = 0\nvar getTmpname = function (filename) {\n  return filename + '.' + murmurhex(__filename, process.pid, ++invocations)\n}\n\nmodule.exports = function writeFile (filename, data, options, callback) {\n  if (options instanceof Function) {\n    callback = options\n    options = null\n  }\n  if (!options) options = {}\n  var tmpfile = getTmpname(filename)\n  chain([\n    [fs, fs.writeFile, tmpfile, data, options],\n    options.chown && [fs, fs.chown, tmpfile, options.chown.uid, options.chown.gid],\n    [fs, fs.rename, tmpfile, filename]\n  ], function (err) {\n    err ? fs.unlink(tmpfile, function () { callback(err) })\n      : callback()\n  })\n}\n\nmodule.exports.sync = function writeFileSync (filename, data, options) {\n  if (!options) options = {}\n  var tmpfile = getTmpname(filename)\n  try {\n    fs.writeFileSync(tmpfile, data, options)\n    if (options.chown) fs.chownSync(tmpfile, options.chown.uid, options.chown.gid)\n    fs.renameSync(tmpfile, filename)\n  } catch (err) {\n    try { fs.unlinkSync(tmpfile) } catch (e) {}\n    throw err\n  }\n}\n"]}